Valid Parenthesis
Give string a 
𝑆
S consisting of only 
(
( and 
)
). Find whether 
𝑆
S is a valid parenthesis string.

Note: A valid parentheses string is defined as:

Empty string is valid.
If 
𝑃
P is valid, 
(
𝑃
)
(P) is also valid.
If 
𝑃
P and 
𝑄
Q are valid, 
𝑃
𝑄
PQ is also valid.
Input Format
The first line of input will contain a single integer 
𝑇
T, denoting the number of test cases.
Each test case consists of a single line of input, containing string 
𝑆
S.
Output Format
For each test case, output 
1
1 if the given string is a valid parenthesis, or output 
0
0 otherwise.

Constraints
1
≤
𝑇
≤
100
1≤T≤100
1
≤
∣
𝑆
∣
≤
1
0
5
1≤∣S∣≤10 
5
 
The sum of 
∣
𝑆
∣
∣S∣ over all test cases won't exceed 
2
⋅
1
0
5
2⋅10 
5
 .
Sample 1:
Input
Output
3
()(())
(()()
))((
1
0
0
Explanation:
Test case 
1
1: 
(
)
(
(
)
)
()(()) will be valid parenthesis.

Test case 
2
2: 
(
(
)
(
)
(()() will not be valid parenthesis.

Test case 
3
3: 
)
)
(
(
))(( will not be valid parenthesis.

_____________________________________________________________________________________________________________________________
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc=new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0){
		    String str = sc.next();
		    
		    Stack<Character>s = new Stack<>();
		    
		    boolean flag = true;
		    
		    for(char c: str.toCharArray()){
		        
		        if(c=='(')s.push(c);
		         else if(!s.isEmpty()) s.pop();
		         else{
		             flag=false;
		             break;
		         }
		    }
		    if(flag && s.isEmpty()){
		      System.out.println(1);
		      
		    }
		    else{
		       System.out.println(0);
		    }
		}

	}
}
